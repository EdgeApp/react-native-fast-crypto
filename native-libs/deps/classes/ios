inherit common

# Performs an iOS-style build.
# $1 arch name for compiler, work_dir and install_dir.
# $2 platform (either iPhoneOS or iPhoneSimulator)
build_ios() {
    arch=$1
    sdk=$2

    # Put the source in the working directory:
    top_work_dir=$work_dir
    work_dir=$work_dir/$sdk-$arch
    mkdir -p $work_dir
    unpack

    # Establish expected variables:
    target=ios-$arch
    install_dir=$build_dir/prefix/$sdk/$arch

    case $arch in
    arm64)  cross=arm64-apple-darwin10 ;;
    arm*)   cross=arm-apple-darwin10 ;;
    i386)   cross=i386-apple-darwin10 ;;
    x86_64) cross=x86_64-apple-darwin10 ;;
    esac

    case $sdk in
    iPhoneOS)        triple=${arch}-apple-ios10.0 ;;
    iPhoneSimulator) triple=${arch}-apple-ios10.0-simulator ;;
    esac

    # Locate Xcode build tools:
    xcode_dir=$(xcode-select -print-path | sed -e 's@/$@@')
    platform_dir=$xcode_dir/Platforms/$sdk.platform/Developer

    export AR="ar"
    export CC="clang -target $triple"
    export CCLD="clang -target $triple"
    export CPP="clang -E"
    export CXX="clang++ -target $triple"

    platform_sdk="$platform_dir/SDKs/$sdk.sdk"
    sdk_flags="-arch $arch -isysroot $platform_sdk -miphoneos-version-min=10.0"
    export CFLAGS="$sdk_flags -isystem${install_dir}/include -Werror=partial-availability -O2 -maes"
    export CXXFLAGS="$sdk_flags -isystem${install_dir}/include -Werror=partial-availability -O2 -maes"
    export LDFLAGS="$sdk_flags -L${install_dir}/lib"

    export PATH=$xcode_dir/Toolchains/XcodeDefault.xctoolchain/usr/bin:$xcode_dir/usr/bin:$PATH
    export PKG_CONFIG_PATH=$install_dir/lib/pkgconfig

    cd $work_dir
    build
}
build_iphoneos_armv7() {
    build_ios armv7 iPhoneOS
}
build_iphoneos_armv7s() {
    build_ios armv7s iPhoneOS
}
build_iphoneos_arm64() {
    build_ios arm64 iPhoneOS
}
build_iphonesimulator_arm64() {
    build_ios arm64 iPhoneSimulator
}
build_iphonesimulator_i386() {
    build_ios i386 iPhoneSimulator
}
build_iphonesimulator_x86_64() {
    build_ios x86_64 iPhoneSimulator
}

make_task() {
    deps="download"
    for dep in $depends; do
        deps="$deps $dep.build-$1"
    done
    task build-$1 $deps
}

make_task iphoneos-arm64
make_task iphoneos-armv7
make_task iphoneos-armv7s
make_task iphonesimulator-arm64
make_task iphonesimulator-i386
make_task iphonesimulator-x86_64
